#!/usr/bin/env expect

log_user 0

# message_id receiver_spawn_id
array set receivers_for_messages []

# message_id message ...
array set messages_by_id []

# filename file_handle
array set logs_by_filenames []

# spawn_id file_handle
array set logs_by_spawn_ids []

# spawn_id command
array set commands_by_spawn_ids []

array set option []
set option(log) ""
set option(receive) "^receive (\[^\r\n]*)\r\n"
set option(send) "^send (\[^\r\n:]*): (\[^\r\n]*)\r\n"
set option(prefix) ""
set option(suffix) ""

set option_re "--(\[a-z_]*)=(.*)"

set usage "Usage: command-messenger.exp \[--option=value|command] ...
Options:
    log     Filename to log to. Denote command with {}. Default empty=stdout.
    receive Regular expression for registrations to receive messages.
            Default '^receive (\\\[^\\r\\n]*)\\r\\n'.
            Catch group required for identifier of messages to receive.
    send    Regular expression to catch messages to pass to listeners.
            Default '^send (\\\[^\\r\\n:]*): (\\\[^\\r\\n]*)\\r\\n'.
            First catch group required for recipient identifier.
            Second catch group required for collecting the message content.
    prefix  Prefix for subsequent commands. Default empty.
    suffix  Suffix for subsequent commands. Default empty.
    help    Show this usage information and exit.

This command is used to run other commands and pass messages between them.
It shows or logs all other output but hides the messages as they are passed.
For instance, you may want to pass around credentials for user accounts:

    command-messenger.exp create-account-and-output-credentials.sh \\
        record-credentials-for-access.sh
"

foreach arg $argv {
    if {[regexp -- "$option_re" "$arg" all name value]} {

        if {![info exists option($name)]} {
            send_user "Invalid option '$name'\n$usage"
            exit 2
        }

        set option($name) $value
    } elseif {[regexp -- "--?h(elp)?" $arg]} {
        send_user "$usage"
        exit 1
    } else {

        if {$option(log) > 0} {
            set log_filename $option(log)
            if {[regexp -- "(.*){}(.*)" "$option(log)" all prefix suffix]} {
                set log_filename "$prefix$arg$suffix"
            }
            if {![regexp -- ".*\.log$" "$log_filename"]} {
                set log_filename "$log_filename.log"
            }
            if {[info exists logs_by_filenames($log_filename)]} {
                set file_handle $logs_by_filenames($log_filename)
            } else {
                set file_handle [open "$log_filename" "w"]
                array set logs_by_filenames [list $log_filename $file_handle]
            }
        } else {
            set file_handle stdout
        }

        set full_command "$option(prefix)$arg$option(suffix)"
        set time [clock format [clock seconds] -format "\[%Y-%m-%d %T]"]

        puts $file_handle "$time BEGIN: $full_command"
        eval spawn "$full_command"

        array set logs_by_spawn_ids [list $spawn_id $file_handle]
        array set commands_by_spawn_ids [list $spawn_id $full_command]
    }
}

proc pass_message {message_id message} {
    global messages_by_id
    global receivers_for_messages

    lappend messages_by_id($message_id) $message

    foreach {target_id receiver_spawn_id} [array get receivers_for_messages $message_id.*] {
        send -i $receiver_spawn_id -- "$message\n"
    }
}

proc request_messages {receiver_id message_id} {
    global receivers_for_messages
    global messages_by_id

    array set receivers_for_messages [
        list $message_id.$receiver_id $receiver_id
    ]

    if {[info exists messages_by_id($message_id)]} {
        foreach {message} $messages_by_id($message_id) {
            send -i $receiver_id -- "$message\n"
        }
    }
}

while {[array size logs_by_spawn_ids] > 0} {

    expect {
        -i [array names logs_by_spawn_ids]
        -re $option(send) {
            set id $expect_out(1,string)
            set message $expect_out(2,string)
            puts $logs_by_spawn_ids($expect_out(spawn_id)) "(send $id)\n"

            pass_message $id $message
            exp_continue
        }
        -re $option(receive) {
            set current_spawn_id $expect_out(spawn_id)
            set message_id $expect_out(1,string)
            puts $logs_by_spawn_ids($expect_out(spawn_id)) "(receive $message_id)"

            request_messages $current_spawn_id $message_id
            exp_continue
        }
        -re "(\[^\r\n]*)\[\r\n]+" {
            puts $logs_by_spawn_ids($expect_out(spawn_id)) "$expect_out(1,string)"
            exp_continue
        }
        eof {
            set spawn_id $expect_out(spawn_id)

            set time [clock format [clock seconds] -format "\[%Y-%m-%d %T]"]
            set command $commands_by_spawn_ids($spawn_id)
            set log $logs_by_spawn_ids($spawn_id)
            puts $log "$time END: $command"

            array unset logs_by_spawn_ids $spawn_id
            array unset commands_by_spawn_ids $spawn_id

            foreach {target_id receiver_spawn_id} [array get receivers_for_messages] {
                if {$receiver_spawn_id == $spawn_id} {
                    array unset receivers_for_messages $target_id
                }
            }
        }
    }

}
